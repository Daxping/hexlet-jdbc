import java.sql.Connection;
import java.sql.SQLException;
import java.util.*;
import java.sql.Statement;

public class UserDAO {
    private Connection connection;

    public UserDAO(Connection conn) {
        connection = conn;
    }
    public void save(User user) throws SQLException {
        var sql = "INSERT INTO users (username, phone) VALUES (?, ?)";
        try (
            var preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setString(1, user.getName());
            preparedStatement.setString(2, user.getPhone());
            preparedStatement.executeUpdate();
            var generatedKeys = preparedStatement.getGeneratedKeys();
            if (generatedKeys.next()) {
                // Обязательно установить id в сохраненный объект
                user.setId(generatedKeys.getLong(1));
            } else {
                throw new SQLException("DB have not returned an id after saving an entity");
            }
        }
    }

    // Возвращается Optional<User> так как это упрощает
    // обработку ситуаций когда в базе ничего не найдено
    public Optional<User> find(Long id) throws SQLException {
        var sql = "SELECT * FROM users WHERE id = ?";
        try (var stmt = connection.prepareStatement(sql)) {
            stmt.setLong(1, id);
            var resultSet = stmt.executeQuery();
            if (resultSet.next()) {
                var username = resultSet.getString("username");
                var phone = resultSet.getString("phone");
                var user = new User(username, phone);
                user.setId(id);
                return Optional.of(user);
            }
            return Optional.empty();
        }
    }
    public void delete(Long id) throws SQLException {
    var sql4 = "DELETE FROM users Where id = ?";
            try (var preparedStatement = connection.prepareStatement(sql4)) {
              preparedStatement.setLong(1, id);
              preparedStatement.executeUpdate();
            }
    }
}
